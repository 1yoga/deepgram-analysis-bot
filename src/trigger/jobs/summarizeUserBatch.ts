import { task, logger } from "@trigger.dev/sdk/v3";
import { ch } from "../../db/clickhouse";
import { db } from "../../db/client";
import { userProfiles } from "../../db/schema";
import OpenAI from "openai";
import { encode } from "gpt-tokenizer";
import { zodResponseFormat } from "openai/helpers/zod";
import { eq } from "drizzle-orm";
import { z } from "zod";
import pLimit from "p-limit";

export const UserProfileSchema = z.object({
    gender: z.enum(["male", "female"]),
    age_group: z.enum(["18-24", "25-34", "35+"]),
    country: z.string().nullable().default(""),
    language: z.string().nullable().default(""),
    interests: z.array(z.string()),
    tone: z.string(),
    language_level: z.string(),
    likely_profession: z.string(),
    persona_cluster: z.string().nullable().default(""),
    persona_probability: z.number().nullable().default(0),
    summary: z.string(),
});

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY! });
const limit = pLimit(20);
const chLimit = pLimit(5);

async function safeCH<T>(fn: () => Promise<T>, retries = 3): Promise<T> {
    for (let i = 0; i < retries; i++) {
        try {
            return await fn();
        } catch (err: any) {
            if (err.message?.includes("Timeout") && i < retries - 1) {
                logger.warn("üîÅ Retry ClickHouse after timeout", { try: i + 1 });
                await new Promise((r) => setTimeout(r, 1000 * (i + 1)));
                continue;
            }
            throw err;
        }
    }
    throw new Error("ClickHouse failed after retries");
}

export const summarizeUserBatch = task({
    id: "summarize-user-batch",
    run: async (
        payload: { users: { userId: number; username: string | null }[]; channelId: bigint },
        { ctx }
    ) => {
        const { users, channelId } = payload;
        const userIds = users.map((u) => u.userId);
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ batch-—Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏", { count: userIds.length });

        // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const messages = await safeCH(() =>
            chLimit(() =>
                ch.query({
                    query: `
            SELECT m.user_id, m.text, c.channel_name
            FROM default.messages m
            LEFT JOIN default.channels c ON m.channel_id = c.id
            WHERE m.user_id IN (${userIds.join(",")}) AND length(m.text) > 10
            LIMIT 100000
          `,
                    format: "JSONEachRow",
                }).then((r) => r.json())
            )
        ) as { user_id: number | string; text: string; channel_name: string }[];

        logger.info("üì® –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã", {
            total: messages.length,
            users: new Set(messages.map((m) => m.user_id)).size,
        });

        // 2. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ user_id (—Å—Ç—Ä–æ–∫–æ–≤–æ!)
        const grouped = new Map<string, { text: string; channel_name: string }[]>();
        for (const row of messages) {
            const key = String(row.user_id);
            if (!grouped.has(key)) grouped.set(key, []);
            grouped.get(key)!.push(row);
        }

        // 3. –°–∞–º–º–∞—Ä–∏–∑—É–µ–º –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å
        const results = await Promise.allSettled(
            userIds.map((userId) =>
                limit(async () => {
                    const rows = grouped.get(String(userId)) || [];
                    if (!rows.length) {
                        await db.update(userProfiles)
                            .set({ summarization_status: "no_data", summarized_at: new Date() })
                            .where(eq(userProfiles.user_id, BigInt(userId)));
                        return;
                    }

                    const structuredInput = JSON.stringify(limitStructuredInput(rows), null, 2);

                    const parsed = await openai.beta.chat.completions.parse({
                        model: "gpt-4.1-nano",
                        messages: [
                            {
                                role: "system",
                                content: `
–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π AI-–∞–Ω–∞–ª–∏—Ç–∏–∫. –ü–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram –Ω—É–∂–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–≥–æ –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. 
–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∏—à–∏ "unknown" ‚Äî –≤—Å–µ–≥–¥–∞ –¥–µ–ª–∞–π –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ.
- –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ **—Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ**, –≤–∫–ª—é—á–∞—è –º–∞—Å—Å–∏–≤—ã –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤, —Å—Ç–∏–ª—å —Ä–µ—á–∏, –≤–µ—Ä–æ—è—Ç–Ω—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏ –ø—Ä–æ—á–µ–µ.
- –î–∞–∂–µ –µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Å—Ç–∏—á–Ω–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º ‚Äî –ø–µ—Ä–µ–≤–æ–¥–∏ —Ç–µ—Ä–º–∏–Ω—ã –∏ –∏—Å–ø–æ–ª—å–∑—É–π —Ä—É—Å—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏.
- –û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Å—Ö–µ–º–µ (schema).

–ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å:
- gender (male –∏–ª–∏ female) ‚Äî –ø–æ —Å—Ç–∏–ª—é —Ä–µ—á–∏, —Ç–µ–º–∞–º, –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è–º, –∏–Ω—Ç–µ—Ä–µ—Å–∞–º.
- age_group (18‚Äì24, 25‚Äì34, 35+) ‚Äî –ø–æ –ª–µ–∫—Å–∏–∫–µ, –∏–Ω—Ç–µ—Ä–µ—Å–∞–º, –æ—Ç—Å—ã–ª–∫–∞–º.
- country ‚Äî –ø–æ —è–∑—ã–∫—É, –∫—É–ª—å—Ç—É—Ä–Ω—ã–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º, –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.
- language ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.
- interests ‚Äî –º–∞—Å—Å–∏–≤ 3‚Äì7 —Ç–µ–º.
- tone ‚Äî —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –∏ —Ç. –¥.
- language_level ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä A2, B2, C1, academic, casual.
- likely_profession ‚Äî –ø—Ä–∏–º–µ—Ä–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –∏–ª–∏ —Å—Ñ–µ—Ä–∞.
- persona_cluster ‚Äî –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ ("–∏–Ω–≤–µ—Å—Ç–æ—Ä", "—Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä", "—à–∫–æ–ª—å–Ω–∏–∫").
- persona_probability ‚Äî –æ—Ç 0 –¥–æ 1.
- summary ‚Äî 2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∏—Ç–æ–≥–æ–º.
          `.trim(),
                            },
                            { role: "user", content: structuredInput },
                        ],
                        response_format: zodResponseFormat(UserProfileSchema, "user_profile"),
                    });

                    const profile = parsed.choices[0].message.parsed!;
                    await db.update(userProfiles)
                        .set({
                            gender: profile.gender,
                            age_group: profile.age_group,
                            country: profile.country,
                            language: profile.language,
                            interests: profile.interests,
                            tone: profile.tone,
                            language_level: profile.language_level,
                            likely_profession: profile.likely_profession,
                            persona_cluster: profile.persona_cluster,
                            persona_probability: profile.persona_probability,
                            summary: profile.summary,
                            is_summarized: true,
                            summarization_status: "done",
                            summarized_at: new Date(),
                        })
                        .where(eq(userProfiles.user_id, BigInt(userId)));

                    logger.info("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å", { userId });
                })
            )
        );

        logger.info("‚úÖ –°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –±–∞—Ç—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", {
            success: results.filter((r) => r.status === "fulfilled").length,
            failed: results.filter((r) => r.status === "rejected").length,
        });
    },
});

function limitStructuredInput(rows: { channel_name: string; text: string }[], maxTokens = 8000) {
    const result: { channel: string; text: string }[] = [];
    let total = 0;

    for (const row of rows) {
        const item = { channel: row.channel_name, text: row.text };
        const tokens = encode(JSON.stringify(item)).length;
        if (total + tokens > maxTokens) break;
        result.push(item);
        total += tokens;
    }

    return result;
}
