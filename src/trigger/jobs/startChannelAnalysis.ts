import { task, logger } from "@trigger.dev/sdk/v3";
import { db } from "../../db/client";
import { eq, and, or, isNull, sql } from "drizzle-orm";
import { channels, userProfiles, channelMembers } from "../../db/schema";

import { parseMembersTask } from "./parseMembersTask";
import { summarizePendingBatch } from "../../services/summarizePendingBatch";
import { generateFinalChannelReport } from "./generateFinalChannelReport";

export const startChannelAnalysis = task({
    id: "start-channel-analysis",
    run: async (payload: { channelId: bigint; channelUsername: string; chatId: number }) => {
        const { channelId, channelUsername, chatId  } = payload;

        logger.info("üöÄ –°—Ç–∞—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞", { channelUsername });

        // 1. üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
        try {
            await parseMembersTask.trigger({ channelId, channelUsername });
            logger.info("üì§ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ Trigger");
        } catch (err) {
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å parseMembersTask", { error: err });
            return; // –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–∂–µ –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª
        }

        // 2. üîÅ –°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è + –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        while (true) {
            // –ü—Ä–æ–±—É–µ–º —Å–∞–º–º–∞—Ä–∏–∑–æ–≤–∞—Ç—å —Ö–æ—Ç—è –±—ã –∫–æ–≥–æ-—Ç–æ
            const summarized = await summarizePendingBatch(channelId);

            // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–Ω–∞–ª—É
            const channel = await db.query.channels.findFirst({
                where: eq(channels.id, channelId),
            });

            const isParsingComplete = channel?.parsing_complete === true;
            const isReportAlreadyGenerated = channel?.report_generated_at !== null;

            const [{ count: pendingCount }] = await db
                .select({ count: sql<number>`count(*)` })
                .from(userProfiles)
                .innerJoin(channelMembers, eq(userProfiles.user_id, channelMembers.user_id))
                .where(and(
                    eq(channelMembers.channel_id, channelId),
                    or(
                        isNull(userProfiles.summarization_status),
                        eq(userProfiles.summarization_status, "pending")
                    )
                ));

            logger.info("üîÑ –°—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞", {
                pendingCount,
                parsing: isParsingComplete ? "‚úÖ" : "‚è≥",
                generated: isReportAlreadyGenerated ? "üìù" : "‚Äî",
            });

            const pendingCountNum = Number(pendingCount);

            if (isParsingComplete && pendingCountNum === 0 && !isReportAlreadyGenerated) {
                logger.info("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á—ë—Ç–∞", { channelId });
                break;
            }

            // ‚è≥ –ü–æ–¥–æ–∂–¥—ë–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await new Promise((r) => setTimeout(r, 3000));
        }

        // 3. üìà –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
        await generateFinalChannelReport.trigger({ channelId, chatId });
        logger.info("üéâ –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à—ë–Ω", { channelId });
    },
});
