import { task, logger } from "@trigger.dev/sdk/v3";
import { db } from "../../db/client";
import { eq, and, or, isNull, sql } from "drizzle-orm";
import { channels, userProfiles, channelMembers } from "../../db/schema";
import { summarizePendingBatch } from "../../services/summarizePendingBatch";
import { generateFinalChannelReport } from "./generateFinalChannelReport";
import {delayedMonitorTrigger} from "./delayedMonitorTrigger";

export const monitorChannelAnalysis = task({
    id: "monitor-channel-analysis",
    run: async (payload: { channelId: bigint; channelUsername: string; chatId: number }) => {
        const { channelId, channelUsername, chatId } = payload;

        logger.info("üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö", { channelUsername });

        const channel = await db.query.channels.findFirst({
            where: eq(channels.id, channelId),
        });

        const isParsingComplete = channel?.parsing_complete === true;
        const isReportAlreadyGenerated = channel?.report_generated_at !== null;

        const [{ count: pendingCount }] = await db
            .select({ count: sql<number>`count(*)` })
            .from(userProfiles)
            .innerJoin(channelMembers, eq(userProfiles.user_id, channelMembers.user_id))
            .where(and(
                eq(channelMembers.channel_id, channelId),
                or(
                    isNull(userProfiles.summarization_status),
                    eq(userProfiles.summarization_status, "pending")
                )
            ));

        const pending = Number(pendingCount);

        logger.info("üßÆ –°—Ç–∞—Ç—É—Å:", {
            parsing: isParsingComplete ? "‚úÖ" : "‚è≥",
            summarized: pending === 0 ? "‚úÖ" : `${pending} –æ—Å—Ç–∞–ª–æ—Å—å`,
            report: isReportAlreadyGenerated ? "üìù" : "‚Äî",
        });

        if (isParsingComplete && pending === 0 && !isReportAlreadyGenerated) {
            logger.info("üìà –í—Å–µ –≥–æ—Ç–æ–≤–æ, –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞", { channelId });
            await generateFinalChannelReport.trigger({ channelId, chatId });
            return;
        }

        if (pending > 0) {
            await summarizePendingBatch(channelId);
        }

        // üí° –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥ –∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä
        await delayedMonitorTrigger.trigger({
            ...payload,
            delayMs: 30_000,
        });
    },
});
