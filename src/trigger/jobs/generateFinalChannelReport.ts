import { task, logger } from "@trigger.dev/sdk/v3";
import OpenAI from "openai";
import { db } from "../../db/client";
import { channels, userProfiles, channelMembers } from "../../db/schema";
import {eq, and, desc, sql, isNull} from "drizzle-orm";
import axios from "axios";
import fs from "fs/promises";
import { stringify } from "csv-stringify/sync";
import FormData from "form-data";

export const generateFinalChannelReport = task({
    id: "generate-final-channel-report",
    run: async ({ channelId, chatId }: { channelId: bigint; chatId: number }, { ctx }) => {
        logger.info("üìà –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞", { channelId });

        const channel = await db.query.channels.findFirst({
            where: eq(channels.id, channelId),
        });

        if (!channel) {
            logger.error("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", { channelId });
            return;
        }

        const total = await db
            .select({ count: sql<number>`count(*)` })
            .from(userProfiles)
            .innerJoin(channelMembers, eq(userProfiles.user_id, channelMembers.user_id))
            .where(and(
                eq(channelMembers.channel_id, channelId),
                eq(userProfiles.summarization_status, "done")
            ))

        const count = total[0]?.count || 0;
        if (count === 0) {
            logger.warn("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç—á—ë—Ç–∞", { channelId });
            return;
        }

        const [genderStats, ageStats, countryStats, interestStats, summariesRaw] = await Promise.all([
            db.select({ group: userProfiles.gender, c: sql<number>`count(*)` })
                .from(userProfiles)
                .innerJoin(channelMembers, eq(userProfiles.user_id, channelMembers.user_id))
                .where(and(
                    eq(channelMembers.channel_id, channelId),
                    eq(userProfiles.summarization_status, "done")
                ))
                .groupBy(userProfiles.gender),

            db.select({ group: userProfiles.age_group, c: sql<number>`count(*)` })
                .from(userProfiles)
                .innerJoin(channelMembers, eq(userProfiles.user_id, channelMembers.user_id))
                .where(and(
                    eq(channelMembers.channel_id, channelId),
                    eq(userProfiles.summarization_status, "done")
                ))
                .groupBy(userProfiles.age_group),

            db.select({ group: userProfiles.country, c: sql<number>`count(*)` })
                .from(userProfiles)
                .innerJoin(channelMembers, eq(userProfiles.user_id, channelMembers.user_id))
                .where(and(
                    eq(channelMembers.channel_id, channelId),
                    eq(userProfiles.summarization_status, "done")
                ))
                .groupBy(userProfiles.country)
                .orderBy(desc(sql<number>`count(*)`))
                .limit(10),

            db.select({ group: sql<string>`unnest(${userProfiles.interests})`, c: sql<number>`count(*)` })
                .from(userProfiles)
                .innerJoin(channelMembers, eq(userProfiles.user_id, channelMembers.user_id))
                .where(and(
                    eq(channelMembers.channel_id, channelId),
                    sql`cardinality(${userProfiles.interests}) > 0`
                ))
                .groupBy(sql`1`)
                .orderBy(desc(sql<number>`count(*)`))
                .limit(10),

            db.select({ summary: userProfiles.summary })
                .from(userProfiles)
                .innerJoin(channelMembers, eq(userProfiles.user_id, channelMembers.user_id))
                .where(and(
                    eq(channelMembers.channel_id, channelId),
                    sql`length(${userProfiles.summary}) > 10`
                ))
                .orderBy(sql`random()`)
                .limit(100),
        ]);

        const percent = (n: number) => `${Math.round((n / count) * 100)}%`;

        const genderLine = genderStats.map(g => `${mapGender(g.group)} (${percent(g.c)})`).join(', ');
        const ageLine = ageStats.map(a => `${a.group} (${percent(a.c)})`).join(', ');
        const countryLine = countryStats.map(c => `${c.group} (${percent(c.c)})`).join(', ');
        const interestLine = interestStats.map(i => `${i.group} (${percent(i.c)})`).join(', ');

        const summaries = summariesRaw
            .map(s => s.summary?.trim())
            .filter((s): s is string => Boolean(s));

        const gptPrompt = `
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ Telegram-–∞—É–¥–∏—Ç–æ—Ä–∏–π. –£ —Ç–µ–±—è –µ—Å—Ç—å —Å–≤–æ–¥–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ 100 –∫—Ä–∞—Ç–∫–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–Ω–∞–ª–∞ "${channel.username}".

–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—á–∏—Ç–∞–π –¥–∞–Ω–Ω—ã–µ:

1. –ì–µ–Ω–¥–µ—Ä: ${genderLine}
2. –í–æ–∑—Ä–∞—Å—Ç: ${ageLine}
3. –ì–µ–æ–≥—Ä–∞—Ñ–∏—è: ${countryLine}
4. –ò–Ω—Ç–µ—Ä–µ—Å—ã: ${interestLine}

–¢–µ–ø–µ—Ä—å:

üìå –ß–∞—Å—Ç—å 1. –ê—É–¥–∏—Ç–æ—Ä–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã

–ù–∞ –æ—Å–Ω–æ–≤–µ 100 summary ‚Äî –≤—ã–≤–µ–¥–∏ **—Ç—Ä–∏ –ø–æ—Ä—Ç—Ä–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**:

üü† –ö–∞–∂–¥—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç ‚Äî —ç—Ç–æ —Å–µ–≥–º–µ–Ω—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (—É–∫–∞–∂–∏, –ø—Ä–∏–º–µ—Ä–Ω–æ, —Å–∫–æ–ª—å–∫–æ % –æ–Ω –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç).

üü† –§–æ—Ä–º–∞—Ç:
  üß¨ –ü–æ—Ä—Ç—Ä–µ—Ç 1 ‚Äî ~48% –∞—É–¥–∏—Ç–æ—Ä–∏–∏

  [–¥–≤–∞ –∞–±–∑–∞—Ü–∞ –∂–∏–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è: –∫—Ç–æ –æ–Ω–∏, —á–µ–º –∂–∏–≤—É—Ç, –æ —á—ë–º –¥—É–º–∞—é—Ç, –∫–∞–∫ —Å–µ–±—è –≤–µ–¥—É—Ç]

  (–∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –ü–æ—Ä—Ç—Ä–µ—Ç 2 –∏ 3)

üü† –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–∏—Å–∫–∏. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —à–∞–±–ª–æ–Ω—ã –≤—Ä–æ–¥–µ "–≠—Ç–æ —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π...". –ü–∏—à–∏ –∂–∏–≤–æ, –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º —è–∑—ã–∫–æ–º.

---

üìå –ß–∞—Å—Ç—å 2. –í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–ù–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ + summary + –ø–æ—Ä—Ç—Ä–µ—Ç—ã), –ø—Ä–µ–¥–ª–æ–∂–∏ **—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç—Ä—ë–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º**:

**1. –ö–æ–Ω—Ç–µ–Ω—Ç:** —á—Ç–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å, –∫–∞–∫–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –∑–∞—Ö–æ–¥—è—Ç, –∫–∞–∫–æ–π —Å—Ç–∏–ª—å –ª—É—á—à–µ.

**2. –í–æ–≤–ª–µ—á–µ–Ω–∏–µ:** –∫–∞–∫ –ª—É—á—à–µ –≤–∫–ª—é—á–∞—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–æ–ø—Ä–æ—Å—ã, AMA, —á–∞—Ç—ã, —Ä–µ–∞–∫—Ü–∏–∏ –∏ —Ç.–ø.).

**3. –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è:** –∫–∞–∫–∏–µ —Ç–∏–ø—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ä–µ–∫–ª–∞–º—ã –ø–æ–¥—Ö–æ–¥—è—Ç, –∫–∞–∫ –ª—É—á—à–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å.

–§–æ—Ä–º—É–ª–∏—Ä—É–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, –ø–æ –¥–µ–ª—É. –ë–µ–∑ –≤–æ–¥—ã. –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
`.trim();

        const gptInput = summaries.join('\n\n');

        const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY! });

        const completion = await openai.chat.completions.create({
            model: "gpt-4.1-nano",
            messages: [
                { role: "system", content: gptPrompt },
                { role: "user", content: gptInput },
            ],
        });

        const reportText = completion.choices[0].message.content?.trim();
        if (!reportText) {
            logger.error("‚ùå GPT –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç–∞");
            return;
        }

        const reportHeader = `üìä –û–¢–ß–Å–¢ –ü–û –ö–ê–ù–ê–õ–£ @${channel.username}
üóì –î–∞—Ç–∞: ${new Date().toLocaleDateString("ru-RU")}
üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –≤—ã–±–æ—Ä–∫–µ: ${count.toLocaleString("ru-RU")}

üìç –û–ë–©–ò–ô –û–ë–ó–û–†

–ì–µ–Ω–¥–µ—Ä: ${genderLine}
–í–æ–∑—Ä–∞—Å—Ç: ${ageLine}
–ì–µ–æ–≥—Ä–∞—Ñ–∏—è: ${countryLine}
–ò–Ω—Ç–µ—Ä–µ—Å—ã: ${interestLine}

üìç –ì–ï–ù–î–ï–†–ù–´–ô –°–û–°–¢–ê–í
${genderStats.map(g => `- **${mapGender(g.group)}** ‚Äî ${percent(g.c)}`).join('\n')}

üìç –í–û–ó–†–ê–°–¢–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê
${ageStats.map(a => `- ${a.group}: ${percent(a.c)}`).join('\n')}

üìç –ì–ï–û–ì–†–ê–§–ò–Ø –ü–û–î–ü–ò–°–ß–ò–ö–û–í
${countryStats.map(c => `- ${c.group}: ${percent(c.c)}`).join('\n')}

üìç –û–°–ù–û–í–ù–´–ï –ò–ù–¢–ï–†–ï–°–´
${interestStats.map((i, idx) => `${idx + 1}. ${i.group}: ${percent(i.c)}`).join('\n')}

üìç –°–ï–ì–ú–ï–ù–¢–´ –ê–£–î–ò–¢–û–†–ò–ò + –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò

`;

        const finalText = `${reportHeader}${reportText}

üìé –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
- CSV-—Ñ–∞–π–ª —Å –ø–æ–ª–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`;

        await sendLongMessage(chatId, finalText);

        await sendProfilesCSV(chatId, channelId, channel.username);

        const updated = await db.update(channels)
            .set({
                report_text: finalText,
                report_generated_at: new Date(),
            })
            .where(and(
                eq(channels.id, channelId),
                isNull(channels.report_generated_at)
            ))
            .returning({ id: channels.id });

        if (updated.length === 0) {
            logger.info("üîÅ –û—Ç—á—ë—Ç —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º, –≤—ã—Ö–æ–¥–∏–º");
            return;
        }

        logger.info("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω", { channelId });
    }
});

async function sendLongMessage(chatId: number, text: string) {
    const TELEGRAM_API_URL = `https://api.telegram.org/bot${process.env.BOT_TOKEN}/sendMessage`;
    const MAX_LENGTH = 4000; // –∑–∞–ø–∞—Å –æ—Ç –ª–∏–º–∏—Ç–∞ Telegram (4096)
    const chunks = splitTextIntoChunks(text, MAX_LENGTH);

    for (let i = 0; i < chunks.length; i++) {
        const part = chunks[i];

        try {
            await axios.post(TELEGRAM_API_URL, {
                chat_id: chatId,
                text: part,
                parse_mode: "Markdown",
            });

            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ—Ä–∞–≥–º–µ–Ω—Ç –æ—Ç—á—ë—Ç–∞", {
                chatId,
                part: `${i + 1}/${chunks.length}`,
            });

            await new Promise((r) => setTimeout(r, 500)); // –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (–º—è–≥–∫–∞—è)
        } catch (err) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞", {
                chatId,
                part: i + 1,
                error: err,
            });
            break; // –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
        }
    }
}

function splitTextIntoChunks(text: string, maxLength: number): string[] {
    const chunks: string[] = [];
    let start = 0;

    while (start < text.length) {
        let end = start + maxLength;

        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ –æ–±—Ä–µ–∑–∞—Ç—å –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ —Å–ª–æ–≤–∞
        if (end < text.length) {
            const lastNewline = text.lastIndexOf("\n", end);
            const lastSpace = text.lastIndexOf(" ", end);
            if (lastNewline > start) end = lastNewline;
            else if (lastSpace > start) end = lastSpace;
        }

        chunks.push(text.slice(start, end).trim());
        start = end;
    }

    return chunks;
}

function mapGender(gender: string | null): string {
    if (!gender) return "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
    const normalized = gender.toLowerCase();
    if (normalized === "male") return "–ú—É–∂—á–∏–Ω—ã";
    if (normalized === "female") return "–ñ–µ–Ω—â–∏–Ω—ã";
    return gender;
}

async function sendProfilesCSV(chatId: number, channelId: bigint, channelUsername: string) {
    const rows = await db
        .select({
            user_id: userProfiles.user_id,
            username: userProfiles.username,
            gender: userProfiles.gender,
            age_group: userProfiles.age_group,
            country: userProfiles.country,
            language: userProfiles.language,
            interests: userProfiles.interests,
            tone: userProfiles.tone,
            summary: userProfiles.summary,
        })
        .from(userProfiles)
        .innerJoin(channelMembers, eq(userProfiles.user_id, channelMembers.user_id))
        .where(and(
            eq(channelMembers.channel_id, channelId),
            eq(userProfiles.summarization_status, "done")
        ));

    const records = rows.map(r => ({
        ...r,
        interests: r.interests?.join(", ") ?? "",
    }));

    const csv = stringify(records, { header: true });
    const bom = "\uFEFF"; // Excel-friendly UTF-8 BOM
    const filePath = `/tmp/${channelUsername}_profiles.csv`;
    await fs.writeFile(filePath, bom + csv, "utf8");

    const form = new FormData();
    form.append("chat_id", chatId);
    form.append("document", await fs.readFile(filePath), {
        filename: `${channelUsername}_profiles.csv`,
        contentType: "text/csv",
    });

    await axios.post(`https://api.telegram.org/bot${process.env.BOT_TOKEN}/sendDocument`, form, {
        headers: form.getHeaders(),
    });

    logger.info("üìé CSV-—Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");

    await fs.unlink(filePath); // —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
}
