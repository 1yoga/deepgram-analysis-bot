import { Context } from "telegraf";
import { getTelegramClient } from "../telegram/client";
import { Api } from "telegram";
import { parseAndSummarizeChannel } from "../trigger/jobs/parseAndSummarizeChannel";

export const checkConnectionHandler = async (ctx: Context & { session?: any }) => {
    await ctx.answerCbQuery(); // –°–Ω–∏–º–∞–µ–º "—á–∞—Å–∏–∫–∏"

    const channelUsername = ctx.session?.channelUsername;
    if (!channelUsername) {
        await ctx.reply("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –≤–≤–µ—Å—Ç–∏ @username.");
        return;
    }

    try {
        const client = await getTelegramClient();
        const entity = await client.getEntity(`@${channelUsername}`);

        if (!(entity instanceof Api.Channel)) {
            await ctx.reply("‚ö†Ô∏è –≠—Ç–æ –Ω–µ –∫–∞–Ω–∞–ª.");
            return;
        }

        const myAccount = await client.getMe();

        // üëá –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –≤ –∫–∞–Ω–∞–ª–µ
        const participantInfo = await client.invoke(
            new Api.channels.GetParticipant({
                channel: entity,
                participant: myAccount,
            })
        );

        const participant = (participantInfo as any).participant;

        const isAdmin =
            participant.className === "ChannelParticipantAdmin" ||
            participant.className === "ChannelParticipantCreator";

        if (!isAdmin) {
            await ctx.reply(
                `‚ùå –ù–∞—à –∞–∫–∫–∞—É–Ω—Ç @${process.env.TELEGRAM_USERNAME} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –∫–∞–Ω–∞–ª–∞.\n\n` +
                `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑.`
            );
            return;
        }

        const channelId = BigInt(entity.id.toString());

        await ctx.reply("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤...");
        await parseAndSummarizeChannel.trigger({
            channelId,
            channelUsername,
        });

    } catch (err: any) {
        if (err.errorMessage === "USER_NOT_PARTICIPANT") {
            await ctx.reply(
                `‚ùå –ù–∞—à –∞–∫–∫–∞—É–Ω—Ç @${process.env.TELEGRAM_USERNAME} –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª.\n\n` +
                `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑.`
            );
        } else {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", err);
            await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }
};
