import { Context } from "telegraf";
import { markOrderAsPaid } from "../db/queries/orders";
// import { analyzeChannelByOrder } from "../services/analyze";

export const handleSuccessfulPayment = async (ctx: Context) => {
    const message = ctx.message;

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è
    if (!message || !("successful_payment" in message)) return;

    const payload = message.successful_payment.invoice_payload;
    const orderId = parseInt(payload ?? "", 10);
    if (!orderId) return;

    await markOrderAsPaid(orderId);
    // await analyzeChannelByOrder(orderId);

    await ctx.reply(
        `‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n` +
        `‚öôÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥: –î–æ–±–∞–≤—å—Ç–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ –≤–∞—à –∫–∞–Ω–∞–ª —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–±–µ–∑ –ø—Ä–∞–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏).\n\n` +
        `üë§ –ö–æ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å: @${process.env.TELEGRAM_USERNAME}\n\n` +
        `–≠—Ç–æ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞. –ë–æ—Ç –Ω–∏—á–µ–≥–æ –Ω–µ –ø—É–±–ª–∏–∫—É–µ—Ç –∏ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º.`,
        {
            reply_markup: {
                inline_keyboard: [
                    [{ text: "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", callback_data: "check_connection" }],
                ],
            },
        }
    );
};
