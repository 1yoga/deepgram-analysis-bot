import { Context } from "telegraf";
import { markOrderAsPaid } from "../db/queries/orders";
import {posthog} from "../posthog";

export const handleSuccessfulPayment = async (ctx: Context) => {
    const message = ctx.message;

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è
    if (!message || !("successful_payment" in message)) return;

    const payload = message.successful_payment.invoice_payload;
    const orderId = parseInt(payload ?? "", 10);
    if (!orderId) return;

    await markOrderAsPaid(orderId);

    posthog.capture({
        distinctId: ctx.from!.id.toString(),
        event: "payment_successful",
        properties: {
            orderId,
        },
    });

    await ctx.reply(
        `‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n` +
        `‚öôÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥: –¥–æ–±–∞–≤—å—Ç–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–º–æ–∂–Ω–æ –±–µ–∑ –ø—Ä–∞–≤–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏).\n\n` +
        `üë§ –ò–º—è –±–æ—Ç–∞: @${process.env.TELEGRAM_USERNAME}\n\n` +
        `üì° –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Äî –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø –∏ –Ω–∞—á–Ω—ë–º –∞–Ω–∞–ª–∏–∑.`,
        {
            reply_markup: {
                inline_keyboard: [
                    [{ text: "üöÄ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data: "check_connection" }],
                ],
            },
        }
    );
};
